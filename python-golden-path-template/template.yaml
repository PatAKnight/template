apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-github-actions-argocd-template
  title: Python GitHub Actions ArgoCD
  description: Create a starter Python application with GitHub Actions and ArgoCD enabled
  tags:
    - recommended
    - python
    - github-actions
    - argocd
spec:
  owner: user:janus-authors
  type: service

  parameters:
    - title: Provide the GitHub location
      required:
        - org
        - repo
      properties:
        org:
          title: AppCode
          type: string
          description: GitHub Organization
        repo:
          title: Repository
          type: string
          description: Repository name
    - title: Provider information about the new component
      required:
        - owner
      properties:
        description:
          title: Description
          type: string
          description: Help others understand what this component is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: 'group: guest'
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a CI method
      required:
        - ci
      properties:
        ci:
          title: Select a CI method
          type: string
          default: GitHub Actions
          enum:
            - ./github-actions-skeleton
            - ./tekton-skeleton
          enumNames:
            - GitHub Action
            - Tekton
    - title: Provide information for ArgoCD
      required:
        - namespace
        - imageregistry
      properties:
        namespace:
          title: Namespace
          type: string
          description: The namespace for deploying resources
        imageregistry:
          title: Image Registry
          type: string
          description: Enter the Quay.io Image Registry 
  steps:
    - id: template
      name: Generating CI Component
      action: fetch:template
      input:
        url: ${{ parameters.ci }}
        copyWithoutRender:
          - .github/workflows/

    - id: template
      name: Generating Component
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/
        values:
          component_id: ${{ parameters.repo }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.org }}/${{ parameters.repo }}
          org: ${{ parameters.org }}
          owner: ${{ parameters.owner}}
          namespace: ${{ parameters.namespace }}
          imageregistry: ${{ parameters.imageregistry }}
    
    - id: publish
      name: Publishing to Source Code Repository
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.org }}&repo=${{ parameters.repo }}
        defaultBranch: main
    
    - id: register
      name: Registering the component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: View TechDocs
        icon: techdocs
        entityRef: ${{ steps.register.output.entityRef }}/docs
